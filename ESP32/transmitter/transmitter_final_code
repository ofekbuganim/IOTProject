/*
  ESP32 ESP-NOW Sender
  Sends temperature, humidity, and reading ID to a receiver via ESP-NOW
*/

#include <esp_now.h>
#include <WiFi.h>

//UV
#define UV_SENSOR_PIN 34  // D connected to A
//UV
//bmp-section 
#include <Wire.h>
#include <Adafruit_BMP280.h>

#define SDA_PIN 21
#define SCL_PIN 22
#define I2C_ADDRESS 0x76
#define SEALEVELPRESSURE_HPA 1013.25

 Adafruit_BMP280 bmp;
 
 unsigned long lastCheck = 0;
 const unsigned long checkInterval = 5000; 
//bmp-section

//dht_11_temp_humi
#include "DHT.h"

// Pin where the DHT11 is connected
#define DHTPIN 4       // GPIO 4
#define DHTTYPE DHT11  // DHT 11

DHT dht(DHTPIN, DHTTYPE);
//dht_11_temp_humi
// Structure to send data (must match receiver)
typedef struct struct_message {
  float temp;
  float hum;
  unsigned int readingId;
  float windSpeed;
  float pressure;
  float altitude;
  float uvIndex;
} struct_message;

struct_message outgoingReadings;

// Receiver's MAC address (replace with actual receiver MAC)
uint8_t receiverMAC[] = {0xCC, 0xDB, 0xA7, 0x5A, 0xAC, 0xA0}; // Example only

unsigned int readingId = 0;

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Last Packet Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
//wind-section
const int analogPin = 5;  // A0 connected to GPIO34
const int digitalPin = 2;  // D0 connected to GPIO4
//wind-section
void setup() {
  Serial.begin(115200);
  delay(1000);
  WiFi.mode(WIFI_STA);
  Serial.print("ESP32 Sender MAC Address: ");
  Serial.println(WiFi.macAddress());

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register send callback
  esp_now_register_send_cb(OnDataSent);

  // Register peer
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, receiverMAC, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;

  if (!esp_now_is_peer_exist(receiverMAC)) {
    if (esp_now_add_peer(&peerInfo) != ESP_OK) {
      Serial.println("Failed to add peer");
      return;
    }
  }

  // wind-section
  pinMode(digitalPin, INPUT);
  // wind-section

  //bmp-section
  Wire.begin(SDA_PIN, SCL_PIN);
  delay(100);
  if (!bmp.begin(I2C_ADDRESS)) {
     Serial.println("[INIT ERROR] BMP280 not detected at 0x76. Check wiring.");
   } else {
     Serial.println("[INIT] BMP280 initialized successfully.");
   }
  //bmp-section

  //UV
  analogReadResolution(12); // ESP32 default is 12-bit ADC (0-4095)
  //UV  
}

void loop() {
  outgoingReadings.readingId = readingId++;
  //dht 11
  delay(2000);  // DHT11 needs about 2 seconds between readings
  outgoingReadings.temp = dht.readTemperature(); // Celsius by default
  outgoingReadings.hum = dht.readHumidity();
  //dht 11

  //wind-section
  int raw = analogRead(analogPin);
  float voltage = (raw / 4095.0) * 3.3;  // Adjust if using 5V
  outgoingReadings.windSpeed = voltage * 3.0 * 3.6;       // Heuristic multiplier
  //wind-section

  //bmp-section
  if (millis() - lastCheck >= checkInterval) {
     lastCheck = millis();
     // Try to reinitialize if it ever failed
     if (!bmp.begin(I2C_ADDRESS)) {
       Serial.println("[ERROR] Sensor communication failed during runtime.");
       return;
     }
     outgoingReadings.pressure = bmp.readPressure() / 100.0F; // hPa
     outgoingReadings.altitude = bmp.readAltitude(SEALEVELPRESSURE_HPA);
   }
  //bmp-section

  //UV
  int analogValue = analogRead(UV_SENSOR_PIN);
  
  // Convert analog reading (0-4095) to voltage (0-3.3V)
  float voltage_UV = (analogValue / 4095.0) * 3.3;

  // UV index estimation
  // We map voltage to UV index based on their relation
  outgoingReadings.uvIndex = (voltage_UV - 0.99) * (15.0 / (2.8 - 0.99)); 
  if (outgoingReadings.uvIndex < 0) outgoingReadings.uvIndex = 0; // Clamp to zero
  //UV

  // Send the data
  esp_err_t result = esp_now_send(receiverMAC, (uint8_t *)&outgoingReadings, sizeof(outgoingReadings));

  if (result == ESP_OK) {
    Serial.println("Sent with success");
  } else {
    Serial.println("Error sending the data");
  }

  delay(5000); // Send every 5 seconds
}
