#include <Arduino.h>
#include <esp_now.h>
#include <WiFi.h>
#include <DHT.h>
#include <lvgl.h>
#include <TFT_eSPI.h>
#include <XPT2046_Touchscreen.h>
#include "ui.h"

// === Display & Touch Config ===
#define SCREEN_WIDTH   320
#define SCREEN_HEIGHT  240
#define TOUCH_CS_PIN   13
#define TOUCH_MIN_X    203
#define TOUCH_MAX_X    3896
#define TOUCH_MIN_Y    176
#define TOUCH_MAX_Y    3721

//bool isOutdoorConnected = false;
//unsigned int currentReadingId = 0;

// Pin where the DHT11 is connected
#define DHTPIN 14       // GPIO 4
#define DHTTYPE DHT11  // DHT 11

DHT dht(DHTPIN, DHTTYPE);

// Structure to receive data (must match sender)
typedef struct struct_message {
  float temp;
  float hum;
  unsigned int readingId;
  float windSpeed;
  float pressure;
  float altitude;
  float uvIndex;
} struct_message;

struct_message incomingReadings;

// == Callback when data is received ==
void OnDataRecv(const uint8_t * mac_addr, const uint8_t *incomingData, int len) {
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  //Serial.print("Packet received from: ");
  //Serial.println(macStr);

  memcpy(&incomingReadings, incomingData, sizeof(incomingReadings));
}

TFT_eSPI tft = TFT_eSPI();
XPT2046_Touchscreen ts(TOUCH_CS_PIN);

// === LVGL 9.x draw buffer and display
static lv_color_t buf1[SCREEN_WIDTH * 10];
lv_display_t* display;

// === LVGL Flush Callback
void my_flush_cb(lv_display_t* disp, const lv_area_t* area, uint8_t* px_map) {
  tft.startWrite();
  tft.setAddrWindow(area->x1, area->y1,
                    area->x2 - area->x1 + 1,
                    area->y2 - area->y1 + 1);
  tft.pushColors((uint16_t*)px_map,
                 (area->x2 - area->x1 + 1) * (area->y2 - area->y1 + 1),
                 true);
  tft.endWrite();
  lv_display_flush_ready(disp);
}

// === Touch Read Callback
void touchpad_read_cb(lv_indev_t* indev, lv_indev_data_t* data) {
  //Serial.println("inside read cb !!");
  if (ts.touched()) {
    TS_Point p = ts.getPoint();
    uint16_t x = map(p.x, TOUCH_MAX_X, TOUCH_MIN_X, 0, SCREEN_WIDTH);
    uint16_t y = map(p.y, TOUCH_MAX_Y, TOUCH_MIN_Y, 0, SCREEN_HEIGHT);
    data->point.x = x;
    data->point.y = y;
    data->state = LV_INDEV_STATE_PRESSED;
    //Serial.printf("Touch: %d, %d\n", x, y);
  } else {
    data->state = LV_INDEV_STATE_RELEASED;
  }
}

// === Event Callbacks
static void indoor_btn_event_cb(lv_event_t *e) {
  if (lv_event_get_code(e) == LV_EVENT_CLICKED) {
    lv_scr_load(objects.indoor_station);
  }
}

static void outdoor_btn_event_cb(lv_event_t *e) {
  if (lv_event_get_code(e) == LV_EVENT_CLICKED) {
    lv_scr_load(objects.outdoor_station);
  }
}

static void return_btn_event_cb(lv_event_t *e) {
  if (lv_event_get_code(e) == LV_EVENT_CLICKED) {
    lv_scr_load(objects.main);
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("STEP 1: Boot started");
  dht.begin();
  Serial.println("STEP 2: DHT initialized");
  WiFi.mode(WIFI_STA);
  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("STEP 3: ESP-NOW init failed");
    return;
  }
  Serial.println("STEP 3: ESP-NOW initialized");

  // Register receive callback
  esp_now_register_recv_cb(OnDataRecv);
  Serial.println("STEP 4: ESP-NOW recv callback registered");
  //Serial.print("ESP32 MAC Address: ");
  //Serial.println(WiFi.macAddress());

  // === Initialize LVGL
  lv_init();
  Serial.println("STEP 5: LVGL initialized");

  // === Initialize display
  tft.begin();
    Serial.println("STEP 6: TFT initialized");

  tft.setRotation(1);
  ts.begin();
  ts.setRotation(3);
  Serial.println("STEP 7: Touchscreen initialized");

  // === Create display object (LVGL 9)
  display = lv_display_create(SCREEN_WIDTH, SCREEN_HEIGHT);
  lv_display_set_flush_cb(display, my_flush_cb);
  lv_display_set_buffers(display, buf1, NULL, sizeof(buf1), LV_DISPLAY_RENDER_MODE_PARTIAL);
  Serial.println("STEP 8: LVGL display configured");

  // === Create input device (touch)
  lv_indev_t *indev = lv_indev_create();
  lv_indev_set_type(indev, LV_INDEV_TYPE_POINTER);
  lv_indev_set_read_cb(indev, touchpad_read_cb);
  lv_indev_set_disp(indev, display);
  Serial.println("STEP 9: LVGL touch input configured");

  // === Load UI from EEZ
  ui_init();
  lv_scr_load(objects.main);
  Serial.println("STEP 10: UI initialized");

  // === Attach button event callbacks
  if (objects.indoor_button) lv_obj_add_event_cb(objects.indoor_button, indoor_btn_event_cb, LV_EVENT_CLICKED, NULL);
  if (objects.outdoor_button) lv_obj_add_event_cb(objects.outdoor_button, outdoor_btn_event_cb, LV_EVENT_CLICKED, NULL);
  if (objects.outdoor_return_button) {
    lv_obj_add_flag(objects.outdoor_return_button, LV_OBJ_FLAG_CLICKABLE);
    lv_obj_add_event_cb(objects.outdoor_return_button, return_btn_event_cb, LV_EVENT_CLICKED, NULL);
  }

  if (objects.indoor_return_button) {
    lv_obj_add_flag(objects.indoor_return_button, LV_OBJ_FLAG_CLICKABLE);
    lv_obj_add_event_cb(objects.indoor_return_button, return_btn_event_cb, LV_EVENT_CLICKED, NULL);
  }

  Serial.println("STEP 12: Event handlers registered");
}

void loop() {
  lv_task_handler();  // let the GUI do its work
  lv_tick_inc(5);     // tell LVGL how much time has passed
  delay(5);
  
  // === write to indoor screen
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature(); // Celsius by default

  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
  lv_label_set_text(objects.label_temperature_2, (String(temperature) + "°C").c_str());
  lv_label_set_text(objects.label_humidity_2, (String(humidity) + "%").c_str());

  // === write to outdoor screen
  lv_label_set_text(objects.label_temperature_4, (String(incomingReadings.temp) + "°C").c_str());
  lv_label_set_text(objects.label_humidity_4, (String(incomingReadings.hum) + "%").c_str());
  lv_label_set_text(objects.label_pressure_2, (String(incomingReadings.pressure) + " atm").c_str());
  lv_label_set_text(objects.label_altitude_2, (String(incomingReadings.altitude) + " m").c_str());
  lv_label_set_text(objects.label_windspeed_2, (String(incomingReadings.windSpeed) + " km/h").c_str());
  if (incomingReadings.uvIndex < 3) {
    lv_label_set_text(objects.label_uv_index_2, "Low"); //Minimal protection needed
  } else if (incomingReadings.uvIndex < 6) {
    lv_label_set_text(objects.label_uv_index_2, "Moderate"); //Wear sunglasses and sunscreen
  } else if (incomingReadings.uvIndex < 8) {
    lv_label_set_text(objects.label_uv_index_2, "High"); //Reduce time in sun between 10am–4pm
  } else if (incomingReadings.uvIndex < 11) {
    lv_label_set_text(objects.label_uv_index_2, "Very High"); //Seek shade, wear protective clothing
  } else {
    lv_label_set_text(objects.label_uv_index_2, "Extreme"); //Avoid sun exposure
  }
  
}
